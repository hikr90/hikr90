<?xml version="1.0" encoding="UTF-8"?>
<!-- log4j
		- 로그를 설정하는 파일
		- 메이븐과 같은 빌드 툴에서는 프로젝트 생성 시 자동으로 log4j 관련 라이브러리가 설치된다.
		
		구성 태그
			(1) appender
					- 로그의 출력 위치를 지정 (파일, 콘솔, DB등)
			
				# appender의 클래스 종류
					(1.1) ConsoleAppender : 콘솔에 로그 출력
					(1.2) FileAppender : 파일에 로그 출력
					(1.3) RollingFileAppender : 파일 크기가 일정 기준을 넘어가면 기존 파일을 백업파일로 변경한 뒤 처음부터 다시 기록
					(1.4) DailyRollingAppender : 설정한 기간 단위로 새 파일을 생성하여 로그 기록
			
			(2) layout
					- 로그의 출력 형태를 지정
					
				# PatternLayout 출력 속성
					- %p : debug, info, error, fatal등의 로그 레벨 명칭 출력
					- %m : 로그 메세지 출력
					- %d : 로깅 이벤트 발생 시각 출력
					- %F : 로깅이 발생한 프로그램 파일 명칭 출력
					- %l : 로깅이 발생한 caller의 정보 출력
					- %M : 로깅이 발생한 method 명칭 출력
					- %c : 로깅 메세지 앞에 전체 패키지 명칭이나 전체 파일 명칭 출력
					
			(3) logger
					- 로깅 메세지를 appender에 전달
					- 개발자가 log4j.xml 내 로그 레벨을 이용해 로그 출력 여부 조정이 가능하다.
					- logger는 로그 레벨을 가지고있으며 로그의 출력 여부는 로그 레벨과 logger의 레벨로 결정한다.
		
					
		로그 레벨
			- 낮은 레벨의 코드 메세지를 설정하는 경우 그 레벨보다 높게 설정한 메세지는 전부 출력된다. (로컬에서는 무방)
			- 예) debug 레벨 지정 시, 실제 코드에서 그 이상의 레벨에 해당하는 로그는 출력 
		
			(1) fatal : 시스템 차원에서 심각한 문제가 발생하여 애플리케이션이 작동 불가능한 상태의 로그 출력 (일반적인 애플리케이션에서는 사용하지 않음)
			(2) error : 실행 중 문제가 발생한 상태의 로그 출력
			(3) warn : 향후 시스템 오류의 원인이 될 수 있는 경고 로그 출력
			(4) info : 실제 애플리케이션의 운영 로그 출력
			(5) debug : 개발 시 디버그 용도의 로그 출력
			(6) trace : 디버그 레벨보다 상세한 로그 출력
			
			[참고] root logger는 애플리케이션 전체 로그를 콘솔로 출력하는 속성이다.
			
			
		Sql 로그
			(1) jdbc.sqltiming : 쿼리문 정보와 해당 쿼리를 동작하는데 수행된 시간 정보를 같이 출력
			(2) jdbc.sqlonly : 쿼리문 정보 출력
			(3) jdbc.audit : resultset을 제외한 jdbc의 모든 호출 정보 출력 (로그양이 방대하다.)
			(4) jdbc.resultset : jdbc관련 모든 호출 정보를 로그 출력 (로그양이 방대하다.)
			(5) jdbc.resultsettable : 쿼리문의 결과를 표 형식으로 출력 (pom.xml에 log4jdbc-remix 라이브러리가 필요하다.)
-->

<!-- log4j.dtd 에러
		# 방법 1
			- https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/ 주소에서
			- log4j.dtd 파일을 직접 다운로드하여 src/main/resource에 저장
		
		# 방법 2
			- 아래와 같이 DOCTYPE log4j:configuration을 변경
			- PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" 대신 SYSTEM으로도 사용 가능
-->
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<logger name="com.korea.db">
		<level value="warn" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="warn" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="warn" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="warn" />
	</logger>

	<logger name="org.springframework.web">
		<level value="warn" />
	</logger>

	<!-- SQL TIMING -->
	<logger name="jdbc.sqltiming" additivity="false">
		<level value="warn" />
		<appender-ref ref="console"/> 
	</logger>

	<!-- SQL ONLY -->
	<logger name="jdbc.sqlonly" additivity="false"> 
		<level value="info"/> 
		<appender-ref ref="console"/> 
	</logger>

	<!-- AUDIT -->
	<logger name="jdbc.audit" additivity="false"> 
		<level value="info"/>  
		<appender-ref ref="console"/> 
	</logger> 

	<!-- RESULTSET -->
	<logger name="jdbc.resultset" additivity="false">
		<level value="info" />
		<appender-ref ref="console"/> 
	</logger>

	<!-- RESULT SET TABLE -->
	<logger name="jdbc.resultsettable" additivity="false"> 
		<level value="info"/>  
		<appender-ref ref="console"/> 
	</logger> 
	

	<!-- Root Logger -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
	</root>
	
</log4j:configuration>
