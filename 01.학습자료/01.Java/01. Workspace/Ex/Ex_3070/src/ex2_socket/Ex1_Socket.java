package ex2_socket;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Ex1_Socket {
	public static void main(String[] args) {
		/*		소켓 프로그래밍
		 * 		- 소켓을 이용한 통신 프로그래밍 방식
		 * 		- 소켓이란 프로세스 간의 통신에 사용되는 양쪽 끝단을 의미한다.
		 * 		
		 * 		(1) 통신 방식
		 * 			(1.1) TCP/IP
		 * 				#1 연결 후 통신하는 1:1 형태의 통신 방식 (전화기)
		 * 				#2 파일 전송 방식에 적합
		 * 				#3 데이터의 경계를 구분하지 않음 (byte stream)
		 * 				#4 신뢰성있는 데이터를 전송
		 * 						#4.1 데이터의 전송 순서가 보장됨
		 * 						#4.2 데이터의 수신여부를 확인함 (데이터가 손실되면 재전송됨)
		 * 						#4.3 패킷을 관리할 필요가 없음
		 * 				#5 UDP보다는 전송속도가 느림
		 * 				#6 Socket, ServerSoket 클래스 사용
		 * 
		 * 			(1.2) UDP
		 * 				#1 연결없이 통신 (소포)
		 * 				#2 1:1, 1:n 형태의 전송 방식
		 * 				#3 데이터의 경계를 구분함 (datagram)
		 * 				#4 신뢰성 없는 데이터의 전송
		 * 					#4.1 데이터의 전송 순서가 변경될 수 있음
		 * 					#4.2 데이터의 수신여부를 확인하지 않음 (데이터가 손실되어도 알 수 없음)
		 * 					#4.3 패킷을 관리해줘야 함
		 * 				#5 TCP보다 속도가 빠름
		 * 				#6 DatagramSocket, DatagramPacket, MulticastSocket 클래스 사용
		 * 
		 * 		(2) TCP소켓 프로그래밍
		 * 			(2.1) 통신 순서
		 * 				#1 서버 프로그램에서 서버소켓을 사용해서 서버 컴퓨터의 특정 포트에서 클라이언트의 연결 요청을 처리할 준비한다.
		 * 				#2 클라이언트 프로그램은 접속할 서버의 주소와 포트 정보를 가지고 소켓을 생성해서 서버에 연결을 요청한다.
		 * 				#3 서버소켓은 클라이언트의 연결요청을 받으면 서버에 새로운 소켓을 생성해서 클라이언트의 소켓과 연결되도록 한다.
		 * 				#4 클라이언트의 소켓과 새로 생성된 서버의 소켓은 서버소켓과 상관없이 1:1 통신한다.
		 * 
		 * 
		 * 				[참고] 외부소켓 (전화기)  <> 서버소켓 (전화교환기)  <> 내부전화기
		 * 					- 서버 소켓은 포트와 결합되어 포트를 통해서 원격 사용자의 연결요청을 대기하다가 연결요청이 올 때마다 새로운 소켓을 생성하여 상대 소켓과 통신하도록 돕는다.
		 * 					- 생성된 소켓들이 하나의 포트를 공유할 수 있으나, 서버소켓은 포트를 독점한다.
		 * 							(포트가 다수의 서버 소켓과 연동이 가능하다면, 클라이언트가 어떤 서버소켓과 연동해야하는지 구분할 수 없다.)
		 * 
		 * 			(2.2) 소켓과 스트림
		 * 				- 소켓은 입출력 스트림을 통해서 데이터를 주고 받는다.
		 * 				- 각 소켓은 두 개의 스트림 (입력/출력) 을 가지고 있으며 이 스트림들은 연결된 상태편 소켓의 스트림들과 교차 연결된다.
		 * 				
		 * 					[참고] 소켓의 교차 연결 방식
		 * 						- 내부 소켓 입력 >>> 외부 소켓 출력
		 * 						- 내부 소켓 출력 >>> 외부 소켓 입력
		 * 
		 * 			(2.3) TCP 소켓 클래스
		 * 				#1 Socket
		 * 					- 프로세스 간의 통신을 담당하며, InputStream과 OuputStream을 가지고 있다.
		 * 					- 두 종류의 스트림을 통해서 프로세스 간의 통신(입출력)이 가능하다.
		 * 
		 * 				#2 ServerSocket
		 * 					- 포트와 연결되어 외부의 연결요청을 기다리다 연결요청이 들어오면, 소켓을 생성하여 소켓 간의 통신이 가능하게 한다.
		 * 					- 한 포트에 하나의 서버 소켓만 연결할 수 있다. 
		 * 
		 * 					[참고] 프로토콜이 다른 경우에는 서버 소켓도 같은 포트를 공유할 수 있다.
		 * 
		 * 		(3) TCP 소켓 동작 순서
		 * 			- 서버 : 192.168.10.100 / 클라이언트 : 192.168.10.101
		 * 
		 * 			#1 서버 프로그램 (Ex2) 동작
		 * 			#2 서버 소켓 생성
		 * 					- serverSocket = new ServerSocket(7777);
		 * 			#3 서버 소켓이 클라이언트 프로그램의 연결요청을 처리할 수 있도록 대기 상태로 만든다.
		 * 				 클라이언트 프로그램의 연결요청이 오면 새로운 내부 소켓을 생성하여 클라이언트 소켓의 프로그램과 연결한다.
		 * 			#4 클라이언트 프로그램 (Ex3)에서 소켓을 생성하여 서버소켓에 연결을 요청한다.
		 * 					- Socket socket = new Socket("192.168.10.100", 7777);
		 * 			#5 서버소켓은 클라이언트 프로그램의 연결요청을 받아 새로운 소켓을 생성하여 클라이언트 프로그램의 소켓과 연결한다.
		 * 					- Socket socket = serverSocket.accept();
		 */
	}	
}
