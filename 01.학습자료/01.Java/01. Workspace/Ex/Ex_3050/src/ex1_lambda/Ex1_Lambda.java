package ex1_lambda;

import java.util.Arrays;

public class Ex1_Lambda {
	public static void main(String[] args) {
		/*	람다식
		 * 		- 메소드를 하나의 식으로 표현한 것
		 * 		- 함수를 간략하면서도 명확하게 표현할 수 있다.
		 * 		- 메소드의 매개변수로서 전달이 가능하고 메소드의 결과로 반환될 수도 있다.
		 * 
		 * 
		 * 		[참고] 메소드와 함수의 차이
		 * 			- 메소드가 함수는 같은 의미이나, 객체지향점 관점에서 특정 클래스에 반드시 속해야 한다는 제약때문에 메소드라는 같은 의미의 다른 용어로 메소드를 사용했다.
		 * 			- 현재는 람다식을 통해서 메소드가 하나의 독립적인 기능을 수행할 수 있으므로 함수라는 용어를 사용하게 되었다.
		 * 
		 * 		(1) 람다식 작성
		 * 			(1.1) 일반적인 람다식
		 * 				(int a, int b) -> {}
		 * 
		 * 			(1.2) 반환값이 있는 람다식
		 * 				- return문 대신 식으로 대신 작성할 수 있다. 
		 * 				- 문장이 아닌 식으로 ;를 붙이지 않는다.
		 * 				
		 * 				(int a, int b) -> a > b ? a : b
		 * 
		 * 			(1.3) 매개변수 타입이 생략된 람다식
		 * 				- 람다식에 선언된 매개변수가 추론 가능한 경우 생략할 수 있다.
		 * 				- 매개변수 중 일부만 생략하는 경우는 허용하지 않는다.
		 * 					(대부분의 경우에서 생략 가능)
		 * 
		 * 				(a, b) -> a > b ? a : b
		 * 
		 * 			(1.4) 괄호가 생략된 람다식
		 * 				- 선언된 매개변수가 하나인 경우 괄호를 생략할 수 있다.
		 * 				- 단, 매개변수의 타입이 있는 경우 괄호 생략은 불가능하다.
		 * 					(구현부의 문장이 하나인 경우에는 { }를 생략할 수 있으며 끝에 ;를 붙이지 않는다.)
		 * 					(단, return이 들어가는 경우에는 생략할 수 없다.)
		 * 
		 * 				a -> a * a
		 */
		
		// 람다식의 사용
		int [] arr = new int[5];
		Arrays.setAll(arr, (i) -> (int)(Math.random()*5) + 1);
	}
}
