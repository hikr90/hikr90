package ex4_constr;

public class Ex1_Constr {

	/*	생성자
	 * 	- 인스턴스 생성 시, 호출되는 인스턴스 초기화 메소드
	 * 	- 메모리 할당 및 변수 초기화
	 * 	- 클래스 내 선언되며, 메소드와 구조가 비슷하나 리턴이 없다는 차이가 있다.
	 * 
	 * 	(1) 생성자명 규칙
	 * 		(1.1) 클래스명의 명칭과 같아야 한다.
	 * 		(1.2) 오버로딩이 가능하다.
	 * 		(1.3) new 키워드로 생성되는 것으로, 인스턴스 생성과는 관련이 없다.
	 * 		
	 * 	- 생성자는 기본적으로 생략되어있다.
	 * 	- 상황에따라 사용자가 의도적으로 사용한다.
	 * 	- new 와 함께 인스턴스 생성 시 최초 1번만 생성되고 이후 인스턴스 생성없이 추가로 호출할 수 있는 방법은 없다.
	 * 
	 * 	[참고] 타 생성자에서 생성자 호출 시 첫번째 줄에서만 가능하다.
	 * 		- 생성자 내에서 초기화 작업 도중에 타 생성자를 호출할 경우, 타 생성자의 초기화 작업이 무의미해지므로
	 * 
	 * 	(2) 기본 생성자
	 * 		- 모든 클래스에는 반드시 하나 이상의 생성자가 정의된다.
	 * 		- 생성자가 기본적으로 생략될 수 있는 이유는 컴파일러에서 기본 생성자를 제공하기 때문이다.
	 * 		- 만약 사용자가 클래스 내 임의의 생성자를 추가할 경우 반드시 따로 기본 생성자가 들어가야 한다.
	 * 			(생성자가 하나도 정의된 것이 없는 경우 컴파일러가 자동으로 추가한다.)
	 * 
	 * 	(3) 생성 방식
	 * 		- Test t1 = new Test();
	 * 		- 인스턴스 생성 시에는 클래스 내 정의된 생성자 중 한가지가 지정되어야 한다.	
	 * 
	 * 	(4) this & this()
	 * 		(4.1) this
	 * 			- 자기 자신을 가르키는 참조변수로, 인스턴스의 주소가 저장되어 있다.
	 * 			- 인스턴스 변수와 생성자 매개변수가 명칭이 같아 혼동되는 것을 방지하기위해서 사용한다.
	 * 			- 인스턴스 멤버 사용이 안되는 static 메소드에서는 사용할 수 없다.	 * 
	 * 
	 * 				[참고] 모든 인스턴스 메소드(생성자 포함)에는 참조변수 this가 지역변수가 숨겨진 채로 존재한다.
	 * 		
	 * 		(4.2) this()
	 * 			- 생성자 내에서 다른 생성자를 호출하는 방식
	 */
	String company; // 회사명
	String str; // 설립일
	
	// 생성자 생성
	public Ex1_Constr(){
		//
		System.out.println("생성자 호출됨!!");
		
		// 클래스가 생성될 때 어차피 고정 값이 들어가야한다면, 따로 메소드를 생성하지 않고 변수를 지정하는 것으로
		// 속도 측면에서는 좀 더 효율적이다.
		company = "삼성";
		str = "1970-01-01";
	}
}
