package ex3_inheritance;

public class Ex1_Inheritance {
	public static void main(String[] args) {
		/*	상속 
		 * 		- 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것.
		 * 		- 코드의 재사용성을 높이고 코드의 중복을 제거하여 프로그램의 생산성을 높인다.
		 * 
		 * 		(1) 상속 구조
		 * 			(1.1) 부모 클래스
		 * 				- 자식 클래스에게 멤버 등의 값을 상속하는 클래스
		 * 				- 조상 클래스, 상위 클래스, 슈퍼 클래스라고도 한다.
		 * 		
		 * 			(1.2) 자식 클래스
		 * 				- 부모의 멤버 등의 값을 상속받는 클래스
		 * 				- 자손 클래스, 하위 클래스, 서브 클래스라고도 한다.
		 * 	
		 * 		[참고] 자식 클래스는 두 명의 부모 클래스를 상속할 수 없다.
		 * 			- 두 명의 부모 클래스를 상속 가능한 경우, 양 클래스의 동일한 명칭의 멤버가 있다면 자식 클래스는 어떤 부모의 멤버를 사용할지 명시할 수 없다.
		 * 			- 자식은 단 하나의 부모만을 상속 가능하다.
		 *  
		 *  	(2) 특징
		 *  		(2.1) 자식 클래스의 멤버는 부모 클래스에서 접근할 수 없다.
		 *  		(2.2) 생성자와 초기화 블럭은 상속되지 않는다.
		 *  		(2.3) 자손 클래스의 멤버 수 > 부모 클래스의 멤버 수
		 *  		(2.4) 부모 클래스의 접근 제어자는 상속은 되나, 자식 클래스에서 접근이 불가하다.
		 *  		(2.5) 부모는 여러 자식 클래스를 상속 줄 수 있다. (각 자식간 서로 아무 관계도 없다.)
		 *  		(2.6) 자식 클래스 인스턴스 생성 > 부모, 자식 클래스의 멤버 인스턴스 생성
		 *  	
		 *
		 *		(3) 상속의 순서
		 *			(3.1)  객체 생성 (new) 시 Object 클래스에 heap 영역 할당
		 *			(3.2) 부모 클래스 영역, 데이터 생성
		 *			(3.3) 부모 클래스 주소 값을 통해서 자식 클래스의 영역 할당
		 *			(3.4) 자식 클래스 영역, 데이터 생성
		 */

		// 자식 클래스의 객체화
		Ex1_3_Inheritance c = new Ex1_3_Inheritance();
		System.out.println(c.money);
		System.out.println(c.car);
		
		// instanceof 
		// - 클래스 간 주소 값의 비교
		if(c instanceof Ex1_2_Inheritance) {
			System.out.println("c는 Parents의 자식입니다.");
		}
	
		System.out.println("-------------------");
		
		// 부모 클래스의 객체화
		Ex1_2_Inheritance p = new Ex1_2_Inheritance();
		
		/*	Object 클래스
		 * 		- 모든 클래스 상속 계층도의 최상위에 있는 조상 클래스
		 * 		- 컴파일러는 컴파일 시, 다른 클래스로부터 상속받지 않는 모든 클래스들은 자동으로 Object 클래스로부터 상속받게 한다. (타 클래스 상속이여도, 최상위 Object 상속)
		 * 		- toString, equals 등의 메소드 사용이 자유로운 이유는 이 때문이다.
		 */
		if(c instanceof Object) {
			System.out.println("자식 클래스와 부모클래스는 object클래스에 상속되어있다.");
		}
	}
}

// 부모 클래스
class Ex1_2_Inheritance {
	// - 자식에게 상속하고싶지 않은 정보는 private로 제어한다.
	private int donate = 10000000;
	int money = 2000000000;
	String str = "신촌";
}

// 자식 클래스
class Ex1_3_Inheritance extends Ex1_2_Inheritance {
	// - 자식 클래스 extends 부모 클래스 형식으로 사용한다.
	String car = "쏘나타"; 
	
	// [참고] 상속의 단일 상속 체계
	// - 하나의 부모가 여러 자식을 가지는 것은 정상이나,
	// - 자식의 두명의 부모를 가질 수는 없다.
}
