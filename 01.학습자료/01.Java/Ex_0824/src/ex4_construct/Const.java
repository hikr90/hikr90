package ex4_construct;

public class Const {

	/*	생성자 (Construct)
	 * 	- 인스턴스가 생성될 때, 호출되는 '인스턴스 초기화 메소드' (메모리 할당 및 멤버 변수의 초기화 목적)
	 * 	- 클래스 내 선언되며, 구조 역시 메소드와 비슷하나 리턴 값이 없다.
	 * 	- 생성자 명칭은 클래스명의 이름과 같아야 한다.
	 * 	- 생성자는 오버로딩이 가능하다.
	 * 	- 인스턴스는 new 키워드로 생성되는 것이지, 생성자는 인스턴스 생성과는 아무 관련이 없다.
	 * 	- 기본적으로 생성자는 생략되어 숨겨져 있다. (상황에따라 사용자가 초기화 목적으로 의도적으로 사용하는 경우가 있다.)
	 * 	- 생성자는 new 키워드와 함께 인스턴스 생성 시 최초 1번만 생성되며, 이후 인스턴스 생성없이 추가로 호출할 수 있는 방법은 없다.
	 * 	- 한 생성자에서 다른 생성자를 호출하는 경우 반드시 첫번째 줄에서만 가능하다.
	 * 	- (생성자 내에서 초기화 작업 도중에 타 생성자를 호출하게되면 첫 생성자의 초기화 작업이 무의미해지 때문이다.)
	 * 
	 * 	기본 생성자
	 * 		- 모든 클래스에는 반드시 하나 이상의 생성자가 정의되어 있어야 한다.
	 * 		- 클래스에 생성자 정의없이 사용이 가능한 이유는, 컴파일러에서 제공하는 기본 생성자 덕분이다.
	 * 		- 컴파일 시 자바 파일에 생성자가 하나도 정의되지 않은 경우, 컴파일러에서 자동적으로 기본 생성자가 추가되어 컴파일한다.
	 * 		- 만약 사용자가 클래스 내 임의의 생성자를 추가할 경우, 반드시 추가한 생성자 형식으로 인스턴스를 생성하거나, 기본 생성자로 실행할 경우 따로 기본 생성자를 추가해야 한다.
	 * 		- (생성자가 하나도 정의되어 있지 않은 경우만, 컴파일러가 자동으로 추가한다.) 
	 * 
	 * 	생성 방식
	 * 		Test t1 = new Test();
	 * 		인스턴스 생성 시에는 반드시 클래스 내 정의된 생성자 중의 한가지가 선택되어 지정되어야 한다.
	 * 
	 * 	생성자의 매개변수
	 * 		- 인스턴스마다 각기 다른 값으로 초기화되어야하는 경우가 있으므로 매개변수로 초기화되는 생성자는 자주 사용된다.
	 * 		- 인스턴스 생성 후 값을 지정하는 것보다, 매개변수가 포함된 생성이 코드 가독성이 더 높다.
	 * 
	 * 	this와 this()
	 * 		(1) this
	 * 			- 자신을 가르키는 참조변수로 인스턴스의 주소가 저장되어 있다.
	 * 			- this는 참조 변수로 인스턴스 자신을 가르킨다. (this로 인스턴스 변수에 접근)
	 *
	 * 			- this는 인스턴스 멤버를 사용할 수 없는 static 메소드에서는 사용할 수 없다.
	 * 			- 인스턴스 변수와 생성자 매개변수가 명칭이 같은 경우 혼동하지 않기 위해서 사용한다.
	 * 		
	 * 			[참고] 생성자 포함, 모든 인스턴스 메소드에는 자신이 관련된 인스턴스를 가리키는 참조변수 this가 지역변수가 숨겨진 채로 존재한다.
	 * 		
	 * 		(2) this()
	 * 			- 생성자 내에서 다른 생성자를 호출하는 생성자의 방식이다.
	 */
	String company; // 회사명
	String str; // 설립일
	
	// 생성자 생성
	public Const(){
		//
		System.out.println("생성자 호출됨!!");
		
		// 클래스가 생성될 때 어차피 고정 값이 들어가야한다면, 따로 메소드를 생성하지 않고 변수를 지정하는 것으로
		// 속도 측면에서는 좀 더 효율적이다.
		company = "삼성";
		str = "1970-01-01";
	}
}
