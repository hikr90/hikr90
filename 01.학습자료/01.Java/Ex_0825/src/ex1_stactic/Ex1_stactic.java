package ex1_stactic;

public class Ex1_stactic {
		
		/*	변수 (클래스, 인스턴스, 지역)
		 * 	- 변수가 선언된 위치에 따라 변수의 종류가 다르다.
		 * 	- 멤버 변수는 클래스 변수, 인스턴스 변수이다.
		 * 	- 멤버 변수를 제외한 나머지는 모두 지역 변수이다.
		 * 	
		 * 	(1)  클래스 변수 (static)
		 * 		- 클래스 영역에 선언하며 'static 변수명' 의 형태로 사용한다.
		 * 		- 클래스에 메모리가 올라갈 때 자동적으로 생성되며 인스턴스를 따로 생성하지 않아도 사용할 수 있으며 프로그램이 종료될 때까지 유지된다.
		 * 		- 모든 인스턴스가 공통된 저장공간을 공유하여 한번에 제어가 가능하다. (인스턴스 생성없이 바로 사용할 수 있다는 장점이 있으며, '클래스명.클래스변수' 형식으로 사용한다.)
		 * 		- 앞에 public 등의 접근 제어자가 사용되어 어디에서나 사용될 수 있는 전역변수로 사용된다.
		 * 
		 * 	(2) 인스턴스 변수
		 * 		- 클래스 영역에 선언되며, 클래스 내 선언되는 변수이다.
		 * 		- 인스턴스가 생성되었을 때 생성된다.
		 * 		- 독립적인 저장공간을 가지므로 각 인스턴스마다 고유한 값을 사용해야할 때 사용한다.
		 * 
		 * 	(3)  지역 변수
		 * 		- 클래스 영역 이외 (생성자, 초기화 블록같은 메소드 영역) 에 선언된다.
		 * 		- 변수 선언문이 수행되었을 때 생성된다.
		 * 		- 메소드가 종료되면 소멸되어 사용할 수 없다.
		 * 	
		 *		static 키워드
		 *			- 인스턴스를 공통적으로 사용 및 제어하는 키워드
		 *			- 변수 앞과 메소드 앞에 붙어 클래스 변수, 클래스 메소드라고 부른다.
		 *			- 클래스 변수 및 클래스 메소드는 heap 영역이 아닌 static 영역에 저장된다.
		 *			- static 영역에 할당된 메모리는 모든 객체가 공유하므로 어디에서라도 사용 가능하다.
		 *			- static 영역은 가비지 컬렉션의 범주 밖에 있어 static 남발 시 시스템의 성능이 하락한다.
		 *			
		 *		메소드
		 *		 (1) 인스턴스 메소드
		 *			- 인스턴스 변수가 인스턴스 생성 시 사용할 수 있으므로 인스턴스 메소드 역시 반드시 객체 생성을 통해서만 수행 가능하다.
		 *			- 인스턴스 메소드 내에서는 클래스 변수의 사용이 가능하다.
		 *				- 설명) 인스턴스 변수가 존재하는 것은 이미 클래스 변수가 메모리에 존재함을 의미하기 때문이다.
		 *
		 *		(2) 클래스 메소드 (static)
		 *			- 인스턴스 변수 혹은 인스턴스 메소드와 관계 없는 메소드
		 *			- 객체 생성없이 '클래스명.메소드명' 의 형태로 수행 가능하다.
		 *			- 클래스 메소드 내부에서는 인스턴스 변수를 사용할 수 없다.
		 *				설명) 인스턴스 변수는 반드시 인스턴스가 존재 해야하나, 클래스 메소드는 인스턴스 생성 없이 호출이 가능하므로 클래스 메소드 호출 시, 인스턴스가 없을 수 있는 상황을 방지하여 금지되어있다.
		 *
		 *		[참고] 인스턴스 변수의 성능
		 *			- 메소드 내에서 인스턴스 변수가 필요하다면 static을 사용할 수 없다.
		 *			- 반대로 인스턴스 변수나 인스턴스 메소드가 필요없다면 메소드에 static을 붙이는 것이 좋다.
		 *			- 메소드 호출 시간이 짧아지므로 성능이 올라간다.
		 *
		 *		[참고] 클래스 멤버, 인스턴스 멤버 간 참조, 호출
		 *			- 같은 클래스에 속한 멤버 (변수, 메소드) 들 간에는 별도의 인스턴스 생성없이 서로 참조, 호출이 가능하다.
		 *			- 단, 클래스 멤버가 인스턴스 멤버를 호출하고자하는 경우 인스턴스를 생성해야 한다. (클래스 멤버 호출 시에, 인스턴스 멤버는 존재하지 않을 수도 있으므로)
		 */
		String str1 = "일반적인 멤버 변수";
		static String str2 = "stactic 변수입니다. ";
		
		// static 메서드
		public static void result() {
			// System.out.println(str1); // 일반적인 멤버 변수 사용 불가능
			System.out.println(str2);
			//
			int num = 10;				// 일반적인 지역변수는 생성 가능
			// static int num = 10;	// static 변수는 생성 불가능
		} 

		// 일반 메소드
		public void getResult() {
			// static과 멤버 변수 모두 사용 가능하다.
			System.out.println(str1);			
			System.out.println(str2);
			
			// static int num = 10; 	// 일반 메소드 내에서 static 변수는 사용할 수 없다.
			int num = 10;		// 일반 메소드 내에서 일반적인 지역변수는 사용할 수 있다.
		}

		// [참고] 객체 생성 시, 부모 클래스의 생성자가 먼저 생성되고 그 후 자식 객체의 생성자가 생성된다.
		// - 즉, 부모를 객체화하는 경우 부모와 자식의 주소 값이 서로 겹치지 않는다.
}
