package ex6_super;

public class Child extends Parents{
	
	// (1) 부모 클래스 생성자 (2) 자식 클래스 생성자
	public Child() {
		/*	super
		 * 	- 자손 클래스에서 부모 클래스로부터 상속받은 멤버 참조에 사용되는 참조 변수 (부모 클래스를 뜻한다.)
		 * 	- 부모와 자식의 멤버를 구별하는데 사용된다는 부분에서는 this와 같다.  (모든 인스턴스 메소드에서는 자신이 속한 인스턴스의 주소가 지역변수로 저장된다.)
		 * 	- this처럼 static 메소드에서는 사용할 수 없으며 super.메소드 형식으로 사용할 수 있다.
		 *		- 상속의 관계에서 자식 클래스에서 상속받은 부모 클래스의 멤버변수를 참조할 때 사용 
		 *
		 *		- 자식 클래스의 생성자가 동작하기위하여 반드시 부모 클래스의 생성자가 먼저 동작해야 한다.
		 *		-  그래서 메소드 내 따로 super가 없는 경우 컴파일러가 자동으로 자식 클래스 생성자 첫줄에 super(); 를 삽입한다.
		 *
		 *		super() 
		 *			- 부모 클래스 호출 생성자
		 *			- 자식, 자손 클래스의 인스턴스가 생성되면 자식, 자손의 멤버가 모두 합쳐진 인스턴스가 생성되는데 이 때, 부모 클래스의 생성자가 호출되어야 한다.
		 *			- (자식, 자손 클래스에서 부모 클래스의 멤버를 사용할 수 있으므로 부모 클래스의 멤버가 먼저 초기화 되어있어야 한다.)
		 *			- 멤버 초기화 (생성자) 순서 : 손자 > 자식 > 부모 > Object
		 *
		 */
		
		//  부모 클래스인 Parents 내 기본 생성자가 따로 없기에, int 값을 받는 생성자를 호출해야한다. (혹은 super(10)을 제거하고 Parents에 기본 생성자를 추가한다.)
		super(10);
		System.out.println("자식 클래스의 생성자");
	}

	// - 만약 자식이 10의 값을 받고싶지 않은 경우 자식 클래스에서 재정의 해버린다.
	@Override
	public int getNumber() {
		// - 오류 방지용으로, 일단은 parent가 가지고있는 10을 리턴하고 만약 따로 내용을 쓰고싶으면 아래 식을 바꿔서 재정의해라
		// - super.getNumber() : 부모 클래스의 getNumber() 메서드
		return 100;
	}
	
	// - 자식 클래스에 this로 받아줄 변수가 없고 같은 명칭의 변수가 부모클래스에 있는 경우 자식 클래스의 set으로 받을 수 있다. 
	public void setNumber(int number) {
		super.number = number;
	}
	
}
