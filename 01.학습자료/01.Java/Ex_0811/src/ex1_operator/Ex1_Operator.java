package ex1_operator;

public class Ex1_Operator {
	public static void main(String[] args) {
		
		/* 연산자 (Operator)
		 * 	- 연산자의 순서는 (1) 산술 (2) 비교 (3) 논리 (4) 의 순서로 수행된다.
		 * 	- 단항 연산자의 순서는 단항 (1) 이항 (2) 삼항(3) 의 순서로 수행된다.
		 * 	- 단항 연산자와 대입 연산자를 제외한 모든 연산의 기본은 왼쪽에서 오른쪽으로 진행된다. (단항 연산자와 대입 연산자만 오른쪽에서 왼쪽의 순서로 진행)
		 * 		예시, 3 + 4 - 5 은 >>> 순서로 진행된다.
		 * 		예시, x = y = z 은 <<< 순서로 진행된다.
		 * 
		 * 	[참고] 연산자의 처리 순위
		 * 		- 논리 연산자 AND와 OR 중, AND가 더 높은 우선순위를 가진다.
		 * 		- AND와 OR과 같이 사용되는 경우 괄호를 사용해서 우선순위를 명시하는 것이 좋다.
		 * 
		 * 		(높음) 단항		>>		산술		>>		비교		>>		논리		>>		삼항			>>		대입  (낮음)
		 * 
		 * 	(1) 최고 연산자
		 * 		- 연산자 중 순위가 가장 높다.
		 * 		- [. , ( ) ] 이 해당된다.
		 * 
		 * 	(2) 산술연산자
		 * 		- 사직연산과 나머지 연산자를 뜻한다.
		 * 		- [+, -, *,  %, /] 이 해당된다. 
		 * 		- 서로 다른 두 타입의 연산은 형변환이 선행된다.
		 * 				- 두 타입 중 큰 타입의 연산으로 형변환
		 * 				- 피연산자의 타입이 int보다 작은 타입이면 int로 형변환
		 * 
		 * 		(2.1) 연산결과의 타입
		 * 			- 연산결과의 타입은 피연산자의 타입과 일치한다.
		 * 			- 정수형 타입인 (int) 5 / 2 으로 연산할 경우 소수점 이하의 값이 버려지므로 2 가 반환된다.
		 * 			- 반대로 실수형 타입의 (int) 5 / (float) 2 으로 연산할 경우 5.0 / 2.0 이 되어 2.5가 반환된다.   
		 * 	
		 * 	(3) 대입연산자
		 * 		- 특정 값을 변수에 대입하는 연산자
		 * 		- [=, *=, /=, %=, +=, -=] 이 해당된다.
		 * 
		 * 	(4) 비교 연산자
		 * 		- 값을 비교하여 참 혹은 거짓을 판단하는 연산자
		 * 		- 결과는 반드시 true 혹은 false의 값으로 반환되며 해당 값은 boolean 자료형에만 담을 수 있다.
		 * 		- 자바는 항상 위에서 아래, 좌에서 우로 읽기 때문에 비교 연산자의 기준은 항상 좌측에 있는 값이 된다.
		 * 		- [<, >, >=, <=, ==, !=] 이 해당된다.
		 * 		
		 * 		(4.1) 대소비교 연산자와 등가비교 연산자의 차이
		 * 			(4.1.1) 대소비교 : <, >, >=, <=
		 * 				- boolean을 제외한 자료형에 사용가능하며 참조형에는 사용할 수 없다.
		 * 
		 * 			(4.1.2) 등가비교 : ==, !=
		 * 				- 기본형과 참조형 전부에 사용할 수 있다.
		 * 
		 * 		[예시] 10 > 20 : 10은 20보다 작다.
		 * 
		 * 	(5) 논리 연산자
		 * 		- 연산이 두개 이상 요구되는 상황에서 사용하는 연산자
		 * 		- 비교 연산자를 엮어주는 역할을 한다.
		 * 		- 논리 연산자의 결과 역시 true 혹은 false의 boolean 값을 반환한다.
		 * 		- [&&, ||, !]이 해당된다.
		 * 		
		 * 		- 연산자를 기준으로 앞의 값을 먼저 연산하고 경우에따라서 뒤의 값을 연산한다.
		 * 		- !(not)은 boolean 변수 앞에서만 사용할 수 있다.
		 * 		- 참은 거짓으로 반환하고, 거짓은 참으로 반환한다.
		 * 		- !는 영구적으로 값을 변경하지 않는다.
		 * 		- 영구적으로 값을 변경하는 경우  boolean 타입의 변수에 담아야한다.
		 * 
		 * 	[참고] 연산자 결과
		 * 		(5.1) && (and) : 앞의 연산이 참인 경우 뒤의 연산은 하지 않는다.
		 * 			- true 	&& 	true 	: 	true
		 * 			- true 	&& 	false : 	false
		 * 			- false	&& 	true 	: 	false
		 * 			- false 	&& 	false : 	false
		 * 
		 * 		(5.2) || (or) : 앞의 연산이 거짓인 경우 뒤의 연산은 하지 않으므로 거짓이 많이 나올 연산값을 좌측에 배치하는 것이 좋다.
		 * 			- false 	|| 	false : 	false
		 * 			- false 	|| 	true 	: 	true
		 * 			- true 	|| 	false : 	true
		 * 			- true 	|| 	true 	: 	true
		 * 			
		 *		(6)  시프트 연산자, 비트 연산자
		 *			- 시프트 연산자 : 2진수 단위의 연산을 진행, bit단위의 연산을 수행하되, 왼쪽 또는 오른쪽으로 이동시켜 값에대한 변화를 주는 연산자이다.
		 *			- 비트 연산자 : 정보보안분야에서 자주 사용되며, bit단위 (2진수)의 연산만 가능하다.
		 *			- 결과는 정수로만 반환한다.
		 *			- 시프트 연산자 : [>>, <<] 이 해당된다.
		 *			- 비트 연산자 : [&, |, ^]
		 *
		 *		(7) 증감연산자, 누적연산자
		 *			- 1씩 증가하거나 1씩 감소시키는 연산자
		 *			- 2이상의 값을 증감시키는 경우 누적 연산자를 사용한다.
		 *			- 증감연산자는 선행 증감과 후행 증감이 있다.
		 *			- 단, 다른 수식에 포함되거나 메소드의 매개변수로 사용되어야만 연산의 변화가 일어난다.

		 *			- 증감 연산자 : [++, --]
		 *				[참고]	증감 연산자는 피연산자의 왼쪽 혹은 오른쪽 위치에 따라서 전위형, 후위형으로 구분된다.
		 *					- 전위형 :  값이 참고되기 전에 증감한다.
		 *						++i;			// 증가 후에
		 *						j = i;			// 참조하여 대입
		 *
		 *					- 후위형 :  값이 참고된 후에 증감한다.
		 *						i++;			// 참조하여 대입 후에
		 *						j = i;			// 증가
		 *
		 *			- 후행 연산자 : [+=, -=, *=, /=]
		 * 
		 * 	(8) 삼항(조건)연산자
		 * 		- 하나의 조건을 제시하고, 그 조건이 참인 경우와 거짓인 경우의 결과를 다르게 반환하는 연산자이다.
		 * 		- 참, 거짓에대해서 분기 처리가 가능하다.
		 * 		- 가독성을 높이기 위해서 조건식에 괄호를 거는 경우도 있다.
		 * 		
		 * 		조건식 ? 참의 경우 수행할 문장 : 거짓의 경우 수행할 문장
		 */
		
		// 산술 연산자 :
		int n1 = 20;
		int n2 = 7;
		int n3 = n1 + n2;
		System.out.println("+연산 : " + n3);
		
		n3 = n1 - n2;
		System.out.println("-연산 : " + n3);
		
		// 나누기 연산자(/)와 나머지 연산자(%)
		n3 = n1 / n2;
		System.out.println("/연산 : " + n3);
		
		n3 = n1 % n2;
		System.out.println("%연산 : " + n3);
		
		System.out.println("------------------");
		
		// 대입연산자
		int i1 = 10;
		int i2 = 7;
		System.out.println(i1 + ", " + i2);
		
		// += : i1 = i1 + i2;
		// 누적해서 값이 바뀐다. 
		i1 += i2;
		System.out.println("+=연산 : " + i1);
		
		// 대입(누적)연산자는 기존의 값이 누적되어있으므로 값을 착각하면 안된다.
		i1 -= 2; // i1 = i1 - 2;
		System.out.println("-=연산 : " + i1);
		
		i1 /= 3; // i1 = i1 / 3;
		System.out.println("/=연산 : " + i1);
		
		i1 %= 2; // i1 = i1 % 2;
		System.out.println("%=연산 : " + i1);
		
		// [참고] 아래의 식이 -2가 되는 이유
		// (1) x++ 에서 x값은 후위형이므로 5이다.
		// (2) 연산자가 왼쪽에서 오른쪽으로 진행되며 x은 값은 6으로 증감하였고 ++x 의 값은 7이 나온다.
		// (3) 5 - 7 이므로 -2가 출력된다.
		int x = 5;
		x = x++ - ++x;
		System.out.println(x);
	}
}
