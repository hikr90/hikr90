package ex3_interface;

public interface InterTest {
	
	/*	인터페이스
	 * 	- 일종의 추상 클래스로, 다른 클래스 작성에 도움을 주는 목적으로 작성된다. (인스턴스 생성 불가)
	 * 	- 클래스에서 다중 상속을 지원할 수 없어 대체 용도로 개발되었다.
	 * 	- '클래스명 implement 인터페이스명' 의 방식으로 사용된다.
	 * 	- 인터페이스의 구현과 상속은 동시에 진행 가능하다. (클래스명 extends 부모 클래스명 implements 인터페이스명)
	 * 
	 *		생성 규칙
	 *			- 인터페이스의 첫글자는 대문자로 작성한다.
	 *			- 인터페이스의 안에는 상수 값이나 구현부가 없는 메소드만 들어갈 수 있다. (abstract는 옵션)
	 *
	 *		장점
	 *			(1) 개발시간 단축
	 *				- 추상 메소드만 생성해두면, 각자 따로 클래스에서 동시 구현 가능하다.
	 *
	 *			(2) 표준화
	 *				- 프로젝트의 기본 포맷 인터페이스 작성 후, 개발자들이 구현하여 일관성있는 개발이 가능하다.
	 *
	 *			(3) 서로 관계없는 클래스 그룹화
	 *			(4) 독립적인 프로그래밍
	 *				- 클래스 간의 직접적인 관계는 한 클래스의 변경이 반대쪽 클래스에 큰 영향을 주나, 인터페이스는 선언과 구현이 따로이므로 영향도가 거의 없다.
	 *
	 *		제약사항
	 *			- 모든 멤버 변수는 public static final 여야하며, 이는 생략될 수 있다.
	 *			- 모든 메소드는 public abstract 여야하며, 이는 생략될 수 있다.
	 *
	 *		인터페이스의 다중 상속
	 *			- 인터페이스는 메소드의 구현부가 없다.
	 *			- 자식이 a와 b 두 부모로부터 상속받는 상황에서, 양 부모 클래스 내 같은 명칭의 메소드가 존재한다고 가정하였을 때, 자식클래스에서 메소드가 어떤 부모클래스의 메소드인지 명시하기가 어렵다.
	 *			- 반면에 인터페이스는 자식 클래스에서 구현부 작성을 따로 하기에, 다중 상속이 허용된다.
	 *			- '클래스 명칭 implements 인터페이스1, 인터페이스2...' 의 방식으로 사용된다.
	 */
	final int VALUE = 100;				// final은 상수로서, 불변하는 값을 의미한다. (상수는 전부 대문자로 작성한다.)
	abstract int getValue();
}
