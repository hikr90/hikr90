package ex2_pokemon;

public class PokeMain {

	public static void main(String[] args) {
		
		/*	클래스의 다형성
		 * 	- 한 가지의 타입의 변수로 여러 타입의 객체를 참조할 수 있도록 하는 성질
		 * 	- 부모 클래스 타입의 참조변수로 자식 클래스의 인스턴스 참조
		 * 
		 * 			(1) 부모 클래스 t1 = new 자식 클래스
		 * 				- 참조변수 t1은 자식 클래스에서 선언된 멤버 데이터의 사용이 불가능하다.
		 * 				- 자식 클래스의 멤버 중에서 부모 클래스의 멤버 (상속받은 멤버 포함) 만 사용할 수 있다.
		 * 
		 * 			(2) 자식 클래스 t2 = new 자식 클래스
		 * 				- 참조변수 t2는 자식 클래스, 부모 클래스의 양측에서 선언된 멤버 데이터의 사용이 가능하다.
		 * 
		 * 			(에러) 자식 클래스 t3 = new 부모 클래스
		 * 				- 자식 타입의 참조변수로 부모 타입의 인스턴스 참조 불가능 (자식 타입에 선언된 데이터는 부모 타입에 없기에)
		 * 
		 * 		참조변수의 형변환
		 * 			- 서로 상속 관계가 있는 클래스간 참조변수의 형변환이 가능하다.
		 * 			- 형변환의 방법은 기본 자료형과 같다.
		 * 			
		 * 			(1) Up Casting 
		 * 				- 자식 타입 > 부모 타입
		 * 				- 형변환 생략 가능
		 * 
		 * 			(2) Down Casting
		 * 				- 부모 타입 > 자손 타입
		 * 				- 형변환 생략 불가능
		 * 
		 * 			[참고] 참조변수의 형변환은 참조변수의 타입을 변경하는 것으로, 인스턴스와 상관없다. 형변환을 통해서, 참조하고 있는 인스턴스에서 사용할 수 있는 멤버의 범위 (개수) 조절
		 */
		
		// 클래스 생성
		PokeUnit p1 = new PokeUnit();	
		
		// - 해당 클래스 내의 이름, 타입, cp의  값은 비어있으므로 
		// - 메인 클래스에서 각각 완전히 다른 속성을 가지고 있는 클래스를 생성하는 것이 가능하다.
		// - 아래의 예시에서 p1은 피카츄를, p2는 라이츄를, p3는 꼬부기가 될 수 있다.
		// - 이러한 속성을 클래스의 다형성이라고 부른다.
		p1.name = "피카츄";
		p1.type = "전기";
		p1.cp = 1500;
		//
		p1.myPokemon();
		//
		PokeUnit p2 = new PokeUnit();	
		p2.name = "라이츄";
		p2.type = "전기";
		p2.cp = 2000;
		//
		p2.myPokemon();
		//
		PokeUnit p3 = new PokeUnit();	
		p3.name = "꼬부기";
		p3.type = "물";
		p3.cp = 500;
		//
		p3.myPokemon();
	}
}
