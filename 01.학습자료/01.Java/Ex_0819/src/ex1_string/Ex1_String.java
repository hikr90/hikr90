package ex1_string;


public class Ex1_String {

	public static void main(String[] args) {
		
		/*	클래스
		 *		- 클래스를 생성할 때는 기존의 클래스 명칭으로 사용하는 경우 클래스가 덮어쓰기되므로 명칭은 꼭 구분한다.
		 *		- 클래스는 New 키워드를 통해서 생성하며 생성된 결과를 객체라고 부른다.
		 *		- String은 예외로서, New 키워드 없이도 생성 가능하다.
		 *	
		 *	객체
		 *		- 클래스로 생성한 변수를 객체라고 부른다.
		 *		- 컴퓨터 구조적으로는 heap 메모리에 영역을 생성한다.
		 *		
		 *		[참고] 객체와 변수의 생성 차이
		 *			- 객체 : heap 영역에 데이터가 생성되며, stack 영역에 해당 값의 주소 값을 두고 주소 값을 통해서 데이터를 찾는다.
		 *			- 변수 : stack 영역에 데이터를 생성한다.
		 *
		 * String 
		 * 	- 여러개의 문자로 구성된 문자열
		 * 	- 암시적 객체, 명시적 객체 방식으로 생성된다.
		 * 	- 한번 생성된 문자열의 내용은 변하지 않는다. (불변적 특징)
		 * 
		 *		(1) 암시적 객체 생성
		 *			- 기존에 생성된 값과 같은 데이터를 갖고자하는 객체 간 주소를 공유하는 방식
		 *
		 *		(2) 명시적 객체 생성
		 *			- New 키워드를 사용하여 생성하는 변수의 경우 명시적 객체가 된다.
		 *			- 컴퓨터 구조적으로는 heap 영역에 변수의 저장 영역 메모리를 할당받는다.
		 *			- 기존에 있는 데이터와 상관없이 새로운 주소 값의 영역을 생성한다.
		 */
		
		// 암시적 객체 생성
		String s1 = "abc";
		String s2 = "abc";
		
		// 변수와 다르게 객체간의 == 표시는 서로의 주소 값을 비교한다.
		if(s1==s2) {
			System.out.println("주소가 같습니다.");	// 동작
		}else {
			System.out.println("주소가 다릅니다.");
		}

		// 명시적 객체 생성
		String s3 = new String("abc");
		
		// New 키워드로 생성한 값은 같은 abc 여도 다른 주소 값을 가진다.
		if(s1==s3) {
			System.out.println("주소가 같습니다.");
		}else {
			System.out.println("주소가 다릅니다.");	// 동작
		}
		
		System.out.println("---------------");
		
		// 결론
		// - String 과 같은 클래스 객체는 값을 서로 비교하는 경우 == 를 통해서 비교하지 않는다.
		// - 대신 equals() 라는 메소드를 사용한다. 
		// (.를 통해서 클래스 내부의 기능을 사용할 수 있는데  이를 메소드라고 부른다.)
		// 객체1.equals(객체2) : 같은 경우 true, 다른 경우 false를 반환한다.
		if(s1.equals(s3)) {
			System.out.println("s1과 s3의 값이 같습니다."); // 동작
		}
		
		System.out.println("---------------");

		// String의 불변적 특징
		// - 한번 생성된 문자열의 내용은 변하지 않는다.
		
		//	(1) 아래의 greet 문자열은 heap 영역에 "안녕" 이라는 메모리를 할당받는다.
		// 	(2) greet에 "안녕하세요." 라는 문자열로 변경을 할 시
		// 	(3) heap 영역에는 "안녕하세요." 라는 새로운 영역을 할당받는다.
		// 	(4) 그 후 기존의 "안녕" 이라는 영역의 주소 값을 삭제해버리고 새로운 "안녕하세요" 라는 영역에 새로운 주소 값을 연결한다. (주소의 이전)
		// 	(5) 주소 값이 끊어진 데이터는 일정 시간이 지난 뒤 jvm의 가비지 컬렉터에 의해서 자동으로 삭제가 된다.
		String greet = "안녕";
		greet += "하세요.";
		System.out.println(greet);
		
		
		/* StringBuilder 
		 *		- String의 불변적 특성을 해결하기 위한 클래스
		 *		- String 값이 변경되는 경우 메모리의 해제와 할당이 이루어지는데 이 작업이 빈번한 경우 성능에 문제가 생긴다.
		 *		- StringBuilder는 값이 변경되는 경우 새로운 객체를 생성하는 대신에 기존 객체를 수정하므로 상대적으로 부하가 적다. 
		 */
		StringBuilder sb = new StringBuilder();
		sb.append("abc");
		sb.append("abc");
		// toString은 StringBuilder를 String타입으로 출력하는 메소드이다.
		sb.toString();
	}
}
