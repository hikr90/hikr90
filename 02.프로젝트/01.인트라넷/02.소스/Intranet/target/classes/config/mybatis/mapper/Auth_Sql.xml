<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="auth">
	<select id="intrAuthInqyDao1010" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrAuthInqyDao1010 : 권한 목록 조회 */
		SELECT 
					AUTH_CD
				,	AUTH_NM
				,	USE_YN
				,	DISP_ORDER
				,	REMARK
		FROM INTR_AUTH
		WHERE 1=1
			<if test="srchNm != null and srchNm != ''">
				AND REGEXP_REPLACE(LOWER(AUTH_NM),'[^0-9가-힣A-Za-z]*','') LIKE '%'||REGEXP_REPLACE(LOWER(#{srchNm, jdbcType=VARCHAR}),'[^0-9가-힣A-Za-z]*','')||'%'
			</if>
		ORDER BY AUTH_CD
	</select>
	
	<select id="intrAuthInqyDao1020" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrAuthInqyDao1020 : 권한 상세 조회 */
		SELECT 
					AUTH_CD
				,	AUTH_NM
				,	USE_YN
				,	DISP_ORDER
				,	REMARK
		FROM INTR_AUTH
		WHERE AUTH_CD = #{authCd, jdbcType=VARCHAR}
	</select>
	
	<select id="intrAuthInqyDao1030" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrAuthInqyDao1030 : 메뉴 권한 목록 조회 */
		SELECT 
					DATA.*
				,	LEVEL AS LV
		FROM (
				SELECT 
					    	AM.AUTH_CD
					    ,	A.AUTH_NM
					    ,	AM.MENU_CD
					    ,	M.MENU_NM
					    ,	M.MENUTYPE_CD
					    ,	M.UPPR_MENU_CD
					    ,	M.DISP_ORDER
				FROM INTR_AUTH_MENU AM
				LEFT OUTER JOIN INTR_AUTH A
					ON A.AUTH_CD = AM.AUTH_CD
					AND A.USE_YN = 'Y'
				LEFT OUTER JOIN INTR_MENU M
					ON M.MENU_CD = AM.MENU_CD
				WHERE 1=1
					AND A.AUTH_CD = #{authCd, jdbcType=VARCHAR}
			) DATA 
			START WITH DATA.UPPR_MENU_CD IS NULL
			CONNECT BY PRIOR DATA.MENU_CD = DATA.UPPR_MENU_CD
			ORDER SIBLINGS BY DATA.DISP_ORDER, DATA.MENU_CD	
	</select>

	<select id="intrAuthInqyDao1040" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrAuthInqyDao1040 : 사용자 목록 조회 */
		WITH INTR_MAIN AS 
			(
				SELECT 
				        DATA.DEPT_CD
				    ,   DATA.DEPT_NM
				    ,	'' AS UPPR_DEPT_CD
				    ,   '' AS EMP_IDX
			    	,   '' AS EMP_NM
			    	,   LEVEL AS LV
			    	,   'N' AS ISLEAF
				FROM 
					(
						SELECT
						        LD.DEPT_CD
						    ,   LD.DEPT_NM
						    ,   LD.UPPR_DEPT_CD
						    ,   UD.DEPT_NM AS UPPR_DEPT_NM
					    	,   UD.DISP_ORDER
						FROM INTR_DEPT LD
						LEFT OUTER JOIN INTR_DEPT UD
							ON LD.UPPR_DEPT_CD = UD.DEPT_CD
							AND UD.USE_YN = 'Y'
					) DATA
					START WITH DATA.UPPR_DEPT_CD IS NULL
					CONNECT BY PRIOR DATA.DEPT_CD = DATA.UPPR_DEPT_CD
					ORDER SIBLINGS BY DATA.DISP_ORDER, DATA.DEPT_CD
				)
				SELECT 
					RESULT.* 
				FROM (
						SELECT 
								IM.*
						FROM INTR_MAIN IM
						UNION ALL
						SELECT 
					        	INTR_SUB.*
					        ,	'Y'
						FROM (
								SELECT 
								        '' AS DEPT_CD
								    ,   IM.DEPT_NM
								    ,	EMP.DEPT_CD AS UPPR_DEPT_CD
								    ,   EMP.EMP_IDX
								    ,   EMP.EMP_NM
								    ,   IM.LV + 1  AS LV
								FROM INTR_EMP EMP
								LEFT OUTER JOIN INTR_MAIN IM
									ON IM.DEPT_CD = EMP.DEPT_CD
								WHERE EMP.EMP_RESI_DATE IS NULL
								ORDER BY EMP.EMP_NM
							) INTR_SUB
					) RESULT
				START WITH RESULT.UPPR_DEPT_CD IS NULL
				CONNECT BY PRIOR RESULT.DEPT_CD = RESULT.UPPR_DEPT_CD
				ORDER SIBLINGS BY RESULT.DEPT_NM ASC, RESULT.EMP_NM ASC
	</select>

	<select id="intrAuthInqyDao1050" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrAuthInqyDao1050 : 사용자 권한 목록 조회 */
		SELECT 
					DATA.*
		FROM (
				SELECT 
				    	AE.AUTH_CD
				    ,	A.AUTH_NM
				    ,	AE.EMP_IDX
                    ,   E.EMP_NM
				    ,	D.DEPT_NM
				    ,	AE.DISP_ORDER
				FROM INTR_AUTH_EMP AE
                LEFT OUTER JOIN INTR_EMP E
                    ON E.EMP_IDX = AE.EMP_IDX
				LEFT OUTER JOIN INTR_AUTH A
					ON A.AUTH_CD = AE.AUTH_CD
					AND A.USE_YN = 'Y'
				LEFT OUTER JOIN INTR_DEPT D
					ON D.DEPT_CD = E.DEPT_CD
				WHERE 1=1
					AND E.EMP_IDX != 'EMP_0000'
					<if test="authCd != null and authCd != ''">
						AND A.AUTH_CD = #{authCd, jdbcType=VARCHAR}
					</if>
			) DATA 
            ORDER BY DATA.EMP_NM, DATA.EMP_IDX
	</select>
	
		<insert id="intrAuthProcDao1010" parameterType="java.util.HashMap">
		/* intrAuthProcDao1010 : 권한 등록 처리 */
		INSERT INTO INTR_AUTH
		(
					AUTH_CD
				,	AUTH_NM
				,	USE_YN
				,	DISP_ORDER
				,	REMARK
		)
		VALUES
		(
				(SELECT 
					'AUTH_' || LPAD(NVL(MAX(SUBSTR(AUTH_CD,LENGTH(AUTH_CD)-3,LENGTH(AUTH_CD))),0) + 1,4,0) AS AUTH_CD 
				 FROM INTR_AUTH
				)
			,	#{authNm, jdbcType=VARCHAR}
			,	#{useYn, jdbcType=VARCHAR}
			,	(
					SELECT 
						NVL(MAX(DISP_ORDER),0) + 1 
					FROM INTR_AUTH
				)
			,	#{remark, jdbcType=VARCHAR}
		)
	</insert>

	<update id="intrAuthProcDao1020" parameterType="java.util.HashMap">
		/* intrAuthProcDao1020 : 권한 수정 처리 */
		UPDATE INTR_AUTH
			SET		AUTH_NM = #{authNm, jdbcType=VARCHAR}
				,	USE_YN = #{useYn, jdbcType=VARCHAR}
				,	REMARK = #{remark, jdbcType=VARCHAR}
		WHERE AUTH_CD = #{authCd, jdbcType=VARCHAR}
	</update>
	
	<delete id="intrAuthProcDao1030" parameterType="java.util.HashMap">
		/* intrAuthProcDao1030 : 권한 삭제 처리 */
		DELETE FROM INTR_AUTH
			WHERE AUTH_CD = #{authCd, jdbcType=VARCHAR}
	</delete>
	
	<delete id="intrAuthProcDao1040" parameterType="java.util.HashMap">
		/* intrAuthProcDao1040 : 메뉴 권한 삭제 처리 */
		DELETE FROM INTR_AUTH_MENU
			WHERE AUTH_CD = #{authCd, jdbcType=VARCHAR}
	</delete>
	
	<insert id="intrAuthProcDao1050" parameterType="java.util.HashMap">
		/* intrAuthProcDao1050 : 메뉴 권한 등록 처리 */
		INSERT INTO INTR_AUTH_MENU
		(
					AUTH_CD
				,	MENU_CD
				,	USE_YN
				,	DISP_ORDER
				,	REMARK
		)
		VALUES
		(
				#{authCd, jdbcType=VARCHAR}
			,	#{menuCd, jdbcType=VARCHAR}
			,	'Y'
			,	(
					SELECT 
						NVL(MAX(DISP_ORDER),0) + 1 
					FROM INTR_AUTH_MENU WHERE AUTH_CD = #{authCd, jdbcType=VARCHAR}
				)
			,	NULL
		)
	</insert>
	
	<delete id="intrAuthProcDao1060" parameterType="java.util.HashMap">
		/* intrAuthProcDao1060 : 사용자 권한 삭제 처리 */
		DELETE FROM INTR_AUTH_EMP
			WHERE AUTH_CD = #{authCd, jdbcType=VARCHAR}
	</delete>
	
	<insert id="intrAuthProcDao1070" parameterType="java.util.HashMap">
		/* intrAuthProcDao1070 : 사용자 권한 등록 처리 */
		INSERT INTO INTR_AUTH_EMP
		(
					AUTH_CD
				,	EMP_IDX
				,	USE_YN
				,	DISP_ORDER
				,	REMARK
		)
		VALUES
		(
				#{authCd, jdbcType=VARCHAR}
			,	#{empIdx, jdbcType=VARCHAR}
			,	'Y'
			,	(
					SELECT 
						NVL(MAX(DISP_ORDER),0) + 1 
					FROM INTR_AUTH_EMP WHERE AUTH_CD = #{authCd, jdbcType=VARCHAR}
				)
			,	NULL
		)
	</insert>
	
	<select id="intrAuthInqyDao1060" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrAuthInqyDao1060 : 로그인 권한 사용자 목록 조회 */
		SELECT 
					IAE.AUTH_CD
				, 	IA.AUTH_NM
				,	E.EMP_ID
				,	E.EMP_PWD
				,	E.EMP_NM
		FROM INTR_EMP E
        INNER JOIN INTR_AUTH_EMP IAE 
            ON IAE.EMP_IDX = E.EMP_IDX
        LEFT OUTER JOIN INTR_AUTH IA
            ON IA.AUTH_CD = IAE.AUTH_CD
		WHERE 1=1
		ORDER BY IAE.AUTH_CD ASC, E.EMP_IDX
	</select>
</mapper>