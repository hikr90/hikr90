<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="proj">
	<select id="intrProjInqy1011" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrProjInqy1011 : 프로젝트 목록 조회 */
		SELECT 
		            SUB_DATA.NUM
		        ,	SUB_DATA.PROJ_CD
				,	SUB_DATA.PROJ_TITLE
				,	SUB_DATA.PROJ_CONT
				,	SUB_DATA.STATUS
				,	CC_STAT.COMMCODE_NM AS STATUS_NM
				,	SUB_DATA.PROJ_SDT
				,	SUB_DATA.PROJ_EDT
				,	SUB_DATA.ORG_NM
				,	SUB_DATA.RANK_NM
				,	SUB_DATA.OWNER
				,	SUB_DATA.OWNER_NM
				,	SUB_DATA.REG_DT
				,	SUB_DATA.REG_TM
				,	SUB_DATA.LIST_CNT
		FROM (
				SELECT 
		    			P.PROJ_CD
		    		,	P.PROJ_TITLE
		    		,	P.PROJ_CONT
		    		,	P.PROJ_SDT
		    		,	P.PROJ_EDT
		    		,	P.STATUS
		    		,	P.OWNER
		    		,	P.EMP_IDX
		    		,	E.EMP_NM AS OWNER_NM
		    		,   O.ORG_NM
		    		,	R.RANK_NM
                    ,   P.REG_DT
                    ,   P.REG_TM
                    ,	RANK() OVER(ORDER BY P.PROJ_CD DESC) AS NUM
                    ,   COUNT(P.PROJ_CD) OVER() AS LIST_CNT
		        FROM PROJECT P
	        	LEFT OUTER JOIN EMPINFO E
	            	ON P.OWNER = E.EMP_IDX
	            LEFT OUTER JOIN ORG O
	            	ON O.ORG_CD = E.ORG_CD
                       AND O.USE_YN = 'Y'
                LEFT OUTER JOIN RANK R
	            	ON R.RANK_CD = E.RANK_CD
                    AND R.USE_YN = 'Y'
		        WHERE 
		            P.USE_YN = 'Y'
		            <if test="srchNm != null and srchNm != ''">
		            	AND REGEXP_REPLACE(LOWER(P.PROJ_TITLE),'[^0-9가-힣A-Za-z]*','') LIKE '%'||REGEXP_REPLACE(LOWER(#{srchNm, jdbcType=VARCHAR}),'[^0-9가-힣A-Za-z]*','')||'%'
		            </if>
		            <if test="srchDt != null and srchDt !=''">
		            	(AND P.PROJ_SDT &gt;= REPLACE(#{srchSdt, jdbcType=VARCHAR},'-','') OR P.PROJ_EDT &lt;= REPLACE(#{srchEdt, jdbcType=VARCHAR},'-',''))
		            </if>
		  			<if test="orgNm != null and orgNm != ''">
		  				AND REGEXP_REPLACE(LOWER(O.ORG_NM),'[^0-9가-힣A-Za-z]*','') LIKE '%'||REGEXP_REPLACE(LOWER(#{orgNm, jdbcType=VARCHAR}),'[^0-9가-힣A-Za-z]*','')||'%'
					</if>
					<if test="rankNm != null and rankNm != ''">
		            	AND REGEXP_REPLACE(LOWER(R.RANK_NM),'[^0-9가-힣A-Za-z]*','') LIKE '%'||REGEXP_REPLACE(LOWER(#{rankNm, jdbcType=VARCHAR}),'[^0-9가-힣A-Za-z]*','')||'%'
					</if>
					<if test="srchIdx != null and srchIdx != ''">
		            	AND REGEXP_REPLACE(LOWER(E.EMP_NM),'[^0-9가-힣A-Za-z]*','') LIKE '%'||REGEXP_REPLACE(LOWER(#{srchIdx, jdbcType=VARCHAR}),'[^0-9가-힣A-Za-z]*','')||'%'
					</if>
					<if test="srchStatCd != null and srchStatCd != ''">
						AND P.STATUS = #{srchStatCd, jdbcType=VARCHAR}
					</if>
        	) SUB_DATA
        	LEFT OUTER JOIN COMMCODE CC_STAT
            	ON CC_STAT.COMMCODE_CD = SUB_DATA.STATUS
 		WHERE 1=1 
 			<if test="(sIdx != null and sIdx !='') and (eIdx != null and eIdx !='')">
 				AND SUB_DATA.NUM BETWEEN #{sIdx, jdbcType=VARCHAR} AND #{eIdx, jdbcType=VARCHAR}
        	</if>
        ORDER BY SUB_DATA.PROJ_EDT DESC
	</select>
	
	<select id="intrProjInqy1031" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrProjInqy1031 : 프로젝트 상세 */
		SELECT
				DATA.*
			,	CASE
			      	WHEN DATA.DEPOSIT_NUM >= 100000000 THEN TO_CHAR(ROUND(DATA.DEPOSIT_NUM / 100000000, 1)) || '억원'
      				WHEN DATA.DEPOSIT_NUM >= 10000000  THEN TO_CHAR(ROUND(DATA.DEPOSIT_NUM / 10000000, 1))  || '천만원'
     			 	WHEN TO_NUMBER(DATA.DEPOSIT_NUM) >= 10000     THEN TO_CHAR(ROUND(DATA.DEPOSIT_NUM / 10000, 1))     || '만원'
      				ELSE TO_CHAR(TO_NUMBER(DATA.DEPOSIT_NUM)) || '원'
    			END AS DEPOSIT_NM
		FROM (
					SELECT 
								P.PROJ_CD
							,	P.PROJ_TITLE
							,	P.PROJ_CONT
							,	SUBSTR(P.PROJ_SDT,0,4) || '-' || SUBSTR(P.PROJ_SDT,5,2) || '-' || SUBSTR(P.PROJ_SDT,7) AS PROJ_SDT
							,	SUBSTR(P.PROJ_EDT,0,4) || '-' || SUBSTR(P.PROJ_EDT,5,2) || '-' || SUBSTR(P.PROJ_EDT,7) AS PROJ_EDT
							,	P.STATUS
							,	CC_STAT.COMMCODE_NM AS STATUS_NM
							,	P.OWNER
							,	E.EMP_NM AS OWNER_NM
							,	P.DEPOSIT
							,	TO_NUMBER(REGEXP_REPLACE(P.DEPOSIT, '[^0-9]', '')) AS DEPOSIT_NUM
							,	P.TAG
							,	E.ORG_CD
							,	O.ORG_NM
							,	E.RANK_CD
							,	R.RANK_NM
					FROM PROJECT P
					LEFT OUTER JOIN EMPINFO E
						ON P.OWNER = E.EMP_IDX
					LEFT OUTER JOIN ORG O
						ON O.ORG_CD = E.ORG_CD
						AND O.USE_YN = 'Y'
					LEFT OUTER JOIN RANK R
						ON R.RANK_CD = E.RANK_CD
						AND R.USE_YN = 'Y'
					LEFT OUTER JOIN COMMCODE CC_STAT
						ON CC_STAT.COMMCODE_CD = P.STATUS
					WHERE P.PROJ_CD = #{sequenceId, jdbcType=VARCHAR}
		) DATA
	</select>
	
	<insert id="intrProjProc1011" parameterType="java.util.HashMap">
		/* intrProjProc1011 : 프로젝트 등록 처리 */
		INSERT INTO PROJECT
		(
				PROJ_CD
			,	PROJ_TITLE
			,	PROJ_CONT
			,	PROJ_SDT
			,	PROJ_EDT
			,	STATUS
			,	OWNER
			,	DEPOSIT
			,	TAG
			,	EMP_IDX
			,	REG_DT
			,	REG_TM
			,	USE_YN
			,	DISP_ORDER
			,	REMARK
		)
		VALUES
		(
				(SELECT  'PROJ_' || LPAD(NVL(MAX(SUBSTR(PROJ_CD,LENGTH(PROJ_CD)-3,LENGTH(PROJ_CD))),0) + 1,4,0) AS PROJ_CD  FROM PROJECT)
			,	#{projTitle, jdbcType=VARCHAR}
			,	#{projCont, jdbcType=VARCHAR}
			,	REPLACE(#{projSdt, jdbcType=VARCHAR},'-','')
			,	REPLACE(#{projEdt, jdbcType=VARCHAR},'-','')
			,	#{status, jdbcType=VARCHAR}
			,	#{owner, jdbcType=VARCHAR}
			,	#{deposit, jdbcType=VARCHAR}
			,	#{tag, jdbcType=VARCHAR}
			,	#{empIdx, jdbcType=VARCHAR}
			,	TO_CHAR(SYSDATE,'YYYYMMDD')
			,	TO_CHAR(SYSDATE,'HH24MISS')
			,	'Y'
			,	(
					SELECT 
						NVL(MAX(DISP_ORDER),0) + 1 
					FROM PROJECT
				)
			,	NULL
			)
	</insert>
	
	<delete id="intrProjProc1021" parameterType="java.util.HashMap">
		/* intrProjProc1021 : 프로젝트 삭제 처리 */
		DELETE FROM PROJECT
		WHERE PROJ_CD IN
		<foreach collection="delIdxArr" item="delIdx" separator="," open="(" close=")">
			#{delIdx}	
		</foreach>
	</delete>	
	
	<update id="intrProjProc1031" parameterType="java.util.HashMap">
		/* intrProjProc1031 : 공지사항 수정 처리 */
		UPDATE PROJECT
			SET 	PROJ_TITLE = #{projTitle, jdbcType=VARCHAR}
				,	PROJ_CONT = #{projCont, jdbcType=VARCHAR}
				,	STATUS = #{status, jdbcType=VARCHAR}
				,	PROJ_SDT = REPLACE(#{projSdt, jdbcType=VARCHAR},'-','')
				,	PROJ_EDT = REPLACE(#{projEdt, jdbcType=VARCHAR},'-','')
				,	DEPOSIT = #{deposit, jdbcType=VARCHAR}
				,	TAG = #{tag, jdbcType=VARCHAR}
				,	EMP_IDX = #{empIdx, jdbcType=VARCHAR}
				,	REG_DT = TO_CHAR(SYSDATE,'YYYYMMDD')
				,	REG_TM = TO_CHAR(SYSDATE,'HH24MISS')
		WHERE PROJ_CD = #{sequenceId, jdbcType=VARCHAR} 
	</update>	
</mapper>