<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="emp">
	<select id="intrEmpInqy1011" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrEmpInqy1011 : 사원 목록 조회 */
		SELECT 
		            SUB_DATA.*
		FROM (
				SELECT 
		    			E.EMP_IDX
					,   E.ORG_CD
                    ,   O.ORG_NM
		    		,   E.RANK_CD
                    ,   R.RANK_NM
                    ,   E.EMP_NM
                    ,   E.IS_MALE
                    ,	SUBSTR(E.MOB_NO, 1, 3) || '-' || SUBSTR(E.MOB_NO, 4, 4) || '-' || SUBSTR(E.MOB_NO, 8, 4) AS MOB_NO
                    ,   E.ADDR
                    ,   E.ADDR_INFO
                    ,   E.EMAIL
                    ,   E.EMP_ID
                    ,   E.EMP_PWD
                    ,   E.HIRE_DT
                    ,   E.LEAV_DT
                    ,	RANK() OVER(ORDER BY E.HIRE_DT DESC, E.EMP_IDX DESC) AS NUM
                    ,   COUNT(E.EMP_IDX) OVER() AS LIST_CNT
					,	CASE WHEN E.LEAV_DT IS NOT NULL
						THEN 'N'
						ELSE 'Y' END LEAV_YN
 		        FROM EMPINFO E
		            LEFT OUTER JOIN ORG O
		            	ON O.ORG_CD = E.ORG_CD
                        AND O.USE_YN = 'Y'
		            LEFT OUTER JOIN RANK R
		            	ON R.RANK_CD = E.RANK_CD
                        AND R.USE_YN = 'Y'
		        WHERE 1=1
		            <if test="srchNm != null and srchNm != ''">
		            	AND REGEXP_REPLACE(LOWER(E.EMP_NM),'[^0-9가-힣A-Za-z]*','') LIKE '%'||REGEXP_REPLACE(LOWER(#{srchNm, jdbcType=VARCHAR}),'[^0-9가-힣A-Za-z]*','')||'%'
		            </if>
		            <if test="srchSdt != null and srchSdt !=''">
		            	AND E.HIRE_DT &gt;= REPLACE(#{srchSdt, jdbcType=VARCHAR},'-','')
		            </if>
		            <if test="srchEdt != null and srchEdt !=''">
		            	AND E.HIRE_DT &lt;= REPLACE(#{srchEdt, jdbcType=VARCHAR},'-','')
		            </if>
		            <if test="orgNm != null and orgNm != ''">
		  				AND REGEXP_REPLACE(LOWER(O.ORG_NM),'[^0-9가-힣A-Za-z]*','') LIKE '%'||REGEXP_REPLACE(LOWER(#{orgNm, jdbcType=VARCHAR}),'[^0-9가-힣A-Za-z]*','')||'%'
					</if>
					<if test="rankNm != null and rankNm != ''">
						AND REGEXP_REPLACE(LOWER(R.RANK_NM),'[^0-9가-힣A-Za-z]*','') LIKE '%'||REGEXP_REPLACE(LOWER(#{rankNm, jdbcType=VARCHAR}),'[^0-9가-힣A-Za-z]*','')||'%'
					</if>
					<if test="useCd != null and useCd != ''">
						<if test="useCd equals('Y')">
							AND E.LEAV_DT IS NULL
						</if>
						<if test="useCd equals('N')">
							AND E.LEAV_DT IS NOT NULL
						</if>
					</if>
        	) SUB_DATA
 		WHERE 1=1 
 			<if test="(sIdx != null and sIdx !='') and (eIdx != null and eIdx !='')">
 				AND SUB_DATA.NUM BETWEEN #{sIdx, jdbcType=VARCHAR} AND #{eIdx, jdbcType=VARCHAR}
        	</if>
        ORDER BY SUB_DATA.HIRE_DT DESC, SUB_DATA.EMP_NM
	</select>
	
	<select id="intrEmpInqy1012" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrEmpInqy1012 : 사용자 정보 찾기 */
		SELECT 
				EMP_IDX
			,	ORG_CD
			,	RANK_CD
			,	EMP_NM
			,	IS_MALE
			,	MOB_NO
			,	ADDR
			,	ADDR_INFO
			,	EMAIL
			,	EMP_ID
			,	EMP_PWD
			,	HIRE_DT
			,	LEAV_DT
		FROM EMPINFO
		WHERE 1=1 
			AND UPPER(EMAIL) = UPPER(#{findEmail, jdbcType=VARCHAR})
			<if test="findId != null and findId != ''">
				AND UPPER(EMP_ID) = UPPER(#{findId, jdbcType=VARCHAR})
			</if>
			<if test="findNm != null and findNm != ''">
				AND EMP_NM = #{findNm, jdbcType=VARCHAR}
			</if>
	</select>
	
	<select id="intrEmpInqy1013" resultType="CamelHashMap">
		/* intrEmpInqy1013 : 관리자 계정 조회 */
		SELECT 
				EMP_IDX
			,	ORG_CD
			,	RANK_CD
			,	EMP_NM
			,	IS_MALE
			,	MOB_NO
			,	ADDR
			,	ADDR_INFO
			,	EMAIL
			,	EMP_ID
			,	EMP_PWD
			,	HIRE_DT
			,	LEAV_DT
		FROM EMPINFO
		WHERE UPPER(EMP_ID) = 'ADMIN'
	</select>
	
	<select id="intrEmpInqy1021" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrEmpInqy1021 : 부서 목록 조회 */
		SELECT
					ORG_CD
				,	ORG_NM
				,	UPPR_ORG_CD
				,	USE_YN
				,	DISP_ORDER
				,	REMARK
		FROM ORG
		ORDER BY DISP_ORDER ASC
	</select>
	
	<select id="intrEmpInqy1022" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrEmpInqy1022 : 직급 목록 조회 */
		SELECT
					RANK_CD
				,	RANK_NM
				,	USE_YN
				,	DISP_ORDER
				,	REMARK
		FROM RANK
		ORDER BY DISP_ORDER ASC
	</select>
	
	<select id="intrEmpInqy1031" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrEmpInqy1031 : 사원 상세 조회 */
		SELECT
					E.EMP_IDX
				,	E.ORG_CD
				,	O.ORG_NM
				,	E.RANK_CD
				,	R.RANK_NM
				,	E.EMP_NM
				,	E.IS_MALE
				,	SUBSTR(E.MOB_NO, 1, 3) || '-' || SUBSTR(E.MOB_NO, 4, 4) || '-' || SUBSTR(E.MOB_NO, 8, 4) AS MOB_NO
				,	E.ADDR
				,	E.ADDR_INFO
				,	E.EMAIL
				,	E.EMP_ID
				,	E.EMP_PWD
				,	E.HIRE_DT
				,	E.LEAV_DT
				,	CASE WHEN E.LEAV_DT IS NOT NULL
						THEN 'N'
						ELSE 'Y' END LEAV_YN
		FROM EMPINFO E
		LEFT OUTER JOIN ORG O
			ON O.ORG_CD = E.ORG_CD
			AND O.USE_YN = 'Y'
		LEFT OUTER JOIN RANK R
			ON R.RANK_CD = E.RANK_CD
			AND R.USE_YN = 'Y'
		WHERE E.EMP_IDX = #{empIdx, jdbcType=VARCHAR}
	</select>
	
	<select id="intrEmpInqy2021" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrEmpInqy2021 : 사원 아이디 중복 조회 */
		SELECT
					EMP_IDX
				,	ORG_CD
				,	RANK_CD
				,	EMP_NM
				,	IS_MALE
				,	MOB_NO
				,	ADDR
				,	ADDR_INFO
				,	EMAIL
				,	EMP_ID
				,	EMP_PWD
				,	HIRE_DT
				,	LEAV_DT
		FROM EMPINFO
		WHERE UPPER(EMP_ID) = UPPER(#{empId, jdbcType=VARCHAR})
	</select>
	
	<select id="intrEmpInqy2031" resultType="CamelHashMap">
		/* intrEmpInqy2031 : 부서 사원 트리 조회 */
		SELECT 
				    SUB_DATA.*
				,   CASE WHEN SUB_DATA.EMP_NM IS NULL
						THEN 'N'
					    ELSE 'Y'
					END AS ISLEAF
		FROM (
				SELECT 
							DATA.*
					FROM (
		                    	SELECT 
		                	        		O.ORG_CD
		                  				,   O.ORG_NM
		                            	,   O.UPPR_ORG_CD
	                                    ,   '' AS RANK_CD
	                                    ,   '' AS RANK_NM		                            
		                            	,   LEVEL AS LV
	            				        ,   ''  AS EMP_IDX
	         				            ,   ''  AS EMP_NM
	                                    ,   0 AS ROW_NUM
			                    FROM ORG O
								WHERE O.USE_YN = 'Y'
			                    	START WITH O.UPPR_ORG_CD IS NULL
			                    	CONNECT BY PRIOR O.ORG_CD = O.UPPR_ORG_CD
			                    	ORDER SIBLINGS BY O.ORG_CD
		      			) DATA
			      UNION
				  SELECT 
				  			E.ORG_CD
				        ,   O.ORG_NM
				        ,   O.UPPR_ORG_CD
				        ,   E.RANK_CD AS RANK_CD
                        ,   R.RANK_NM AS RANK_NM
				        ,   2 AS LV
				        ,   E.EMP_IDX
				        ,   E.EMP_NM
                        ,   ROW_NUMBER() OVER(ORDER BY EMP_NM ASC) AS ROW_NUM
				    FROM EMPINFO E 
				    LEFT OUTER JOIN ORG O 
				    	ON E.ORG_CD = O.ORG_CD
				    LEFT OUTER JOIN RANK R
                    	ON E.RANK_CD = R.RANK_CD
                     WHERE E.LEAV_DT IS NULL
				) SUB_DATA
			WHERE 1=1
   		    ORDER BY SUB_DATA.ORG_CD ASC , SUB_DATA.LV ASC
	</select>
	
	<select id="intrEmpInqy2041" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrEmpInqy2041 : 부서 사원 수 조회 */
		SELECT 
                  	O.ORG_NM
                ,   COUNT(E.EMP_NM) AS ORG_CNT
		FROM ORG O
		LEFT OUTER JOIN EMPINFO E
			ON E.ORG_CD = O.ORG_CD
            AND O.USE_YN = 'Y'
            AND E.LEAV_DT IS NULL
		GROUP BY O.ORG_NM, O.ORG_CD, O.REG_DT
        ORDER BY ORG_NM ASC
	</select>
	
	<select id="intrEmpInqy2042" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrEmpInqy2042 : 인사 요약 */
		SELECT 
				TO_CHAR(SYSDATE,'YYYY') || '년' AS YEAR
			,	(
					SELECT 
							COUNT(E.EMP_IDX) || '명'
					FROM EMPINFO E
					WHERE SUBSTR(HIRE_DT,0,4) = TO_CHAR(SYSDATE,'YYYY')
				) AS NEW_CNT
			,	(
					SELECT 
							COUNT(E.EMP_IDX) || '명'
					FROM EMPINFO E 
					WHERE E.LEAV_DT IS NOT NULL AND SUBSTR(HIRE_DT,0,4) = TO_CHAR(SYSDATE,'YYYY')
				) AS LEAV_CNT
			,	(
					SELECT 
							COUNT(E.EMP_IDX) || '명'
					FROM EMPINFO E
				) AS EMP_CNT
		FROM DUAL
	</select>
	
	<select id="intrEmpProc1011" resultType="CamelHashMap" parameterType="java.util.HashMap">
		/* intrEmpProc1011 : 사원 인덱스 채번 */
		SELECT LPAD(NVL(MAX(REPLACE(EMP_IDX,'EMP_')),0) + 1,4,0) AS EMP_IDX FROM EMPINFO
	</select>
	
	<insert id="intrEmpProc1012" parameterType="java.util.HashMap">
		/* intrEmpProc1012 : 사원 등록 처리 */
		INSERT INTO EMPINFO
		(
				EMP_IDX
			,	ORG_CD
			,	RANK_CD
			,	EMP_NM
			,	IS_MALE
			,	MOB_NO
			,	ADDR
			,	ADDR_INFO
			,	EMAIL
			,	EMP_ID
			,	EMP_PWD
			,	HIRE_DT
			,	LEAV_DT
		)
		VALUES
		(
				'EMP_' || #{empIdx, jdbcType=VARCHAR}
			,	#{setOrgCd, jdbcType=VARCHAR}
			,	#{setRankCd, jdbcType=VARCHAR}
			,	#{empNm, jdbcType=VARCHAR}
			,	#{isMale, jdbcType=VARCHAR}
			,	#{mobNo, jdbcType=VARCHAR}
			,	#{addr, jdbcType=VARCHAR}
			,	#{addrInfo, jdbcType=VARCHAR}
			,	#{email, jdbcType=VARCHAR}
			,	#{empId, jdbcType=VARCHAR}
			,	#{empPwd, jdbcType=VARCHAR}
			,	TO_CHAR(SYSDATE,'YYYYMMDD')
			,	NULL
		)
	</insert>
	
	<update id="intrEmpProc1021" parameterType="java.util.HashMap">
		/* intrEmpProc1021 : 사원 수정 처리 */
		UPDATE EMPINFO
			SET 	ORG_CD = #{setOrgCd, jdbcType=VARCHAR}
				,	RANK_CD = #{setRankCd, jdbcType=VARCHAR}
				,	IS_MALE = #{isMale, jdbcType=VARCHAR}
				,	MOB_NO = #{mobNo, jdbcType=VARCHAR}
				,	ADDR = #{addr, jdbcType=VARCHAR}
				,	ADDR_INFO = #{addrInfo, jdbcType=VARCHAR}
				,	EMAIL = #{email, jdbcType=VARCHAR}
		WHERE EMP_IDX = #{empIdx, jdbcType=VARCHAR}
	</update>
	
	<update id="intrEmpProc1031" parameterType="java.util.HashMap">
		/* "intrEmpProc1031" : 사원 복직, 퇴사 처리 */
		UPDATE EMPINFO
			SET LEAV_DT =
				CASE WHEN LEAV_DT IS NULL
					THEN TO_CHAR(SYSDATE,'YYYYMMDD')
				ELSE NULL END
		WHERE EMP_IDX = #{empIdx, jdbcType=VARCHAR}
	</update>
	
	<update id="intrEmpProc1041" parameterType="java.util.HashMap">
		/* intrEmpProc1041 : 사원 삭제 처리 */
		DELETE FROM EMPINFO
			WHERE EMP_IDX = #{empIdx, jdbcType=VARCHAR}
	</update>
</mapper>