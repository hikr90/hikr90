<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean> -->
	
	<context:component-scan base-package="com.korea.*" />
	
	<context:annotation-config/>
	
	<!-- 트랜젝션 관리자 (DATASOURCETRANSACTION)
			- 스프링에서 트랜젝션의 기능을 수행하도록 돕는 인터페이스
			- DATASOURCETRANSACTION 인터페이스는 JDBC 및 JDBC기반의 DB에 접근하는 경우 사용한다.
	-->
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="ds"/>
	</beans:bean>

	<!-- TX:ANNOTATION-DRIVEN
			- 트랜젝션 어노테이션을 활성화
			- (TX관련 태그를 사용하기위해서는 NAMESPACE에서 TX 체크란을 체크표시해줘야한다.)
			
			# TRANSACTION-MANAGER
				- 트랜젝션 관리자의 명칭
				- TX:ANNOTATION-DRIVEN 태그 활성화 시, 스프링에서는 트랜젝션 관리자의 빈의 명칭(ID)을 transactionManager로 자동 검색하여 인식한다.
				- 이 때문에 빈 객체의 명칭(ID)을 다르게 지정하거나 복수의 트랜젝션 관리자를 사용하는 경우 해당 속성을 통해서 명칭을 맞춰준다.
				
			# PROXY-TARGET-CLASS
				- 트랜젝션을 클래스 프록시 방법으로 동작할 것인가에대한 여부
				- 프록시란, 동작하는 대상 객체의 기능을 대신 수행하는 임의의 객체를 주입하는 기능 (프록시 서버는 해당 기능을 수행하는 서버이다.)
				
				## 트랜젝션의 프록시 방식
					### JDK PROXY (자바 다이나믹 프록시)
						- 트랜젝션은 기본적으로 JDK방식을 사용하는데 JDK프록시는 인터페이스가 없으면 생성되지 않는다.
						 
					### CLASS PROXY (클래스 프록시) 
							- 클래스를 통해서 생성되는 프록시 방법
							- 일반 클래스에서 트랜젝션을 사용하고자하는 경우, 
							- POM.XML에 CGLIB 라이브러리를 추가한 뒤 TX:ANNOTATION-DRIVEN태그의 PROXY-TARGET-CLASS 속성을 TRUE값으로 지정해줘야한다.
	-->	
	<tx:annotation-driven />
</beans:beans>
