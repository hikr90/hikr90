<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- ROOT/SERVLET-CONTEXT의 차이
			- ROOT-CONTEXT에서는 컨트롤러를 제외한 모든 객체 (DAO, SERVICE)를 생성한다.
			- SERVLET-CONTEXT에서는 컨트롤러 객체를 생성한다.
	-->	
	
	<!-- DAO객체 생성
			- BOARDDAOIMPL DAO = NEW BOARDDAOIMPL() 과 같다.
	--> 
	<bean id="dao" class="dao.BoardDAOImpl"></bean>
				
	<!-- SERVICE객체 생성
			- BOARDSERVICEIMPL SERVICEBEAN = NEW BOARDSERVICEIMPL(DAO) 과 같다.
			- 빈객체 수동 주입 시 SERVICEIMPL에서 생성자가 있어야한다.
	-->
	<bean id="serviceBean" class="service.BoardServiceImpl">
		<constructor-arg ref="dao"/>
	</bean>
	
	<!-- 	Q. 	컨트롤러에서 IMPL의 메소드가 어떻게 서비스를 통해서 사용가능한지?
			A. 	ROOT-CONTEXT생성한 DAO의 객체가 NULL이 아니므로 SERVICEBEAN이 DAO의 객체 내 메소드 사용이 가능하다.
	
			Q. 	인젝션 시 IMPL이 아닌 인터페이스를 넣어도 주입이 되는가?
			A. 	IMPL이 인터페이스를 구현하는 클래스이기 때문이다.
				메모리에서 인터페이스와 구현 클래스가 생성되는 경우, 인터페이스가 먼저 메모리에 할당된 뒤 구현하는 클래스가 생성된다.
				인터페이스와 클래스는 서로 부모자식이므로 서로 같은 인스턴스를 가지게되므로 인터페이스로도 주입이 가능하다.

			Q. 	DAO와 SERVICE로 구분한 이유?
			A. 	상세보기등의 로직을 구현하는 경우 한가지의 기능으로 보이나 그 안에는 상세 정보 로드 > 조회수 처리 > 파일 로드등 여러 단위 작업이 진행된다.
				위 처럼 하나의 단위 작업에 여러가지의 기능이 있는 경우 
				이를 따로 구분하지 않고 하나로 관리하기위해서 여러개의 DAO를 하나의 SERVICE로 묶기 위해서 분리하여 관리한다.
				(DAO1,2.. 처럼 여러개의 DAO가 하나의 서비스 내에서 묶음으로 관리될 수 있도록)
  -->
</beans>